

import os
from Bio import Phylo
import pickle

# File paths required by redvals.py (generated by main.py)
# A Bio.Phylo.Newick.Tree object holding the decorated archeal GTDB phylogenetic tree
ARC_DECORATED_TREE_PATH = "out/ar53_r220_decorated.pkl"
# A Bio.Phylo.Newick.Tree object holding the decorated bacterial GTDB phylogenetic tree
BAC_DECORATED_TREE_PATH = "out/bac120_r220_decorated.pkl"
# A dictionary mapping redvals node IDs to GTDB node IDs
REDVALS_IDS_DICT_PATH = "out/redvals_ids_dict.pkl"
# A dictionary mapping GTDB node IDs to redvals node IDs
GTDB_IDS_DICT_PATH = "out/gtdb_ids_dict.pkl"
# The original Newick format archeal GTDB phylogenetic tree file
ARC_TREE_PATH = "trees/ar53_r220.tree"
# The original Newick format bacterial GTDB phylogenetic tree file
BAC_TREE_PATH = "trees/bac120_r220.tree"
# The TSV file containing RED values for nodes in the archeal GTDB phylogenetic tree
ARC_RED_VALUES_PATH = "red_values/gtdbtk_r220_ar53.tsv"
# The TSV file containing RED values for nodes in the bacterial GTDB phylogenetic tree
BAC_RED_VALUES_PATH = "red_values/gtdbtk_r220_bac120.tsv"


class RedTree:
    def __init__(self, bac_tree_path, arc_tree_path):
        """
        Initialise the RedTree object.
        - bac_tree_path and arc_tree_path can be either:
          - paths to Newick format .tree files
          - paths to .pkl files containing decorated Bio.Phylo.Newick.Tree objects derived from RedTree.write_trees()
        """
        # Enforce that both are the same format
        if bac_tree_path.endswith(".tree") != arc_tree_path.endswith(".tree") or bac_tree_path.endswith(".pkl") != arc_tree_path.endswith(".pkl"):
            raise ValueError("Both trees must be in the same format")
        
        # If the trees are .tree files
        if bac_tree_path.endswith(".tree"):
            self.bac_tree = Phylo.read(bac_tree_path, "newick")
            self.arc_tree = Phylo.read(arc_tree_path, "newick")

        # If the trees are .pkl files
        elif bac_tree_path.endswith(".pkl"):
            self.bac_tree = pickle.load(open(bac_tree_path, "rb"))
            self.arc_tree = pickle.load(open(arc_tree_path, "rb"))

    def redvals(node_1_id, node_2_id):
        """
        Given two node IDs, return their RED distance and the node ID of their MRCA.
        - The two nodes could be leaf nodes, internal nodes or one of each
        - The node IDs can be either:
            - IDs assigned by redvals - e.g. "bac00001342" or "arc00000281"
            - IDs derived from the GTDB phylogenetic trees - e.g. "GB_GCA_002687935.1" or "GB_GCA_000230955.3"
        - MRCA node ID is returned as a redval-assigned ID (e.g. "bac00001342" or "arc00000281")
        """
        return red_distance, mrca_node_id


    def redvals_id_to_gtdb_id(redvals_id):
        """
        Given a redvals ID, return the GTDB ID.
        """
        return gtdb_id


    def gtdb_id_to_redvals_id(gtdb_id):
        """
        Given a GTDB ID, return the redvals ID.
        """
        return redvals_id





# If the decorated trees don't already exist
if not os.path.exists(BAC_DECORATED_TREE_PATH) and not os.path.exists(ARC_DECORATED_TREE_PATH):
    # Initialise the RedTree object
    tree = RedTree(BAC_TREE_PATH, ARC_TREE_PATH)    # Either paths to .tree or .pkl files
else:
    # Load the decorated trees from file
    tree = RedTree(BAC_DECORATED_TREE_PATH, ARC_DECORATED_TREE_PATH)

# If the tree is not decorated (with RED values)
if not tree.is_decorated():
    # If the TSV files containing RED values exist
    if os.path.exists(BAC_RED_VALUES_PATH) and os.path.exists(ARC_RED_VALUES_PATH):
        # Decorate the tree from the TSV files containing RED values
        tree.decorate_from_tsv(BAC_RED_VALUES_PATH, ARC_RED_VALUES_PATH)
    else:
        # Decorate the tree by calculating RED values
        tree.decorate_from_calc()

# If the tree is decorated (with RED values)
if tree.is_decorated():
    # If the decorated trees don't already exist
    if not os.path.exists(BAC_DECORATED_TREE_PATH) and not os.path.exists(ARC_DECORATED_TREE_PATH):
        # Write the decorated trees to file
        tree.write_trees(BAC_DECORATED_TREE_PATH, ARC_DECORATED_TREE_PATH)


# Find the RED distance between two nodes
red_distance, mrca_node_id = tree.redvals("bac00001342", "arc00000281")
print("The RED distance between bac00001342 and arc00000281 is", red_distance)
print("The MRCA of bac00001342 and arc00000281 is", mrca_node_id)

# Find the GTDB ID of a redvals ID
gtdb_id = tree.gtdb_id_to_redvals_id("bac00001342")
print("The GTDB ID of bac00001342 is", gtdb_id)

# Find the redvals ID of a GTDB ID
redvals_id = tree.redvals_id_to_gtdb_id("GB_GCA_026414805.1")
print("The redvals ID of GB_GCA_026414805.1 is", redvals_id)

